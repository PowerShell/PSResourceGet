#################################################################################
#                               OneBranch Pipelines                             #
# This pipeline was created by EasyStart from a sample located at:              #
#   https://aka.ms/obpipelines/easystart/samples                                #
# Documentation:  https://aka.ms/obpipelines                                    #
# Yaml Schema:    https://aka.ms/obpipelines/yaml/schema                        #
# Retail Tasks:   https://aka.ms/obpipelines/tasks                              #
# Support:        https://aka.ms/onebranchsup                                   #
#################################################################################
name: PSResourceGet-Release-$(Build.BuildId)
trigger: none # https://aka.ms/obpipelines/triggers
pr:
  branches:
    include:
    - main
    - release*
parameters: # parameters are shown up in ADO UI in a build queue time
- name: 'debug'
  displayName: 'Enable debug output'
  type: boolean
  default: false

variables:
  - name: DOTNET_CLI_TELEMETRY_OPTOUT
    value: 1
  - name: POWERSHELL_TELEMETRY_OPTOUT
    value: 1
  - name: WindowsContainerImage
    value: onebranch.azurecr.io/windows/ltsc2022/vse2022:latest # Docker image which is used to build the project https://aka.ms/obpipelines/containers

resources:
  repositories: 
    - repository: onebranchTemplates
      type: git
      name: OneBranch.Pipelines/GovernedTemplates
      ref: refs/heads/main

extends:
  template: v2/OneBranch.Official.CrossPlat.yml@onebranchTemplates # https://aka.ms/obpipelines/templates
  parameters:
    featureFlags:
      WindowsHostVersion: '1ESWindows2022'
    customTags: 'ES365AIMigrationTooling'
    globalSdl:
      disableLegacyManifest: true
      sbom:
        enabled: true
        packageName: Microsoft.PowerShell.PSResourceGet
      codeql:
        compiled:
          enabled: true
      asyncSdl: # https://aka.ms/obpipelines/asyncsdl
        enabled: true
        forStages: [Build]
        credscan:
          enabled: true
          scanFolder:  $(Build.SourcesDirectory)\PSResourceGet
        binskim:
          enabled: true
        apiscan:
          enabled: false    
      # tsa:
      #  enabled: false # onebranch publish all sdl results to TSA. If TSA is disabled all SDL tools will forced into 'break' build mode.
      # credscan:
      #   suppressionsFile: $(Build.SourcesDirectory)\.config\CredScanSuppressions.json
      #policheck:
      #  break: true # always break the build on policheck issues. You can disable it by setting to 'false'
      # suppression:
      #   suppressionFile: $(Build.SourcesDirectory)\.gdn\global.gdnsuppress

    stages:
    - stage: stagebuild
        displayName: Build and Package Microsoft.PowerShell.PSResourceGet
        jobs:
        - job: nupkg
          dependsOn: jobbuild
          displayName: Package Microsoft.PowerShell.PSResourceGet
          variables:
            - name: ob_outputDirectory
              value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
            - name: repoRoot
              value: $(Build.SourcesDirectory)\PSResourceGet
            - name: ob_sdl_tsa_configFile
              value: $(Build.SourcesDirectory)\PSResourceGet\.config\tsaoptions.json
          # Disable because SBOM was already built in the previous job
            - name: ob_sdl_sbom_enabled
              value: false
            - name: signOutPath
              value: $(repoRoot)/signed
            - name: ob_signing_setup_enabled
              value: true
          # This job is not compiling code, so disable codeQL
            - name: ob_sdl_codeql_compiled_enabled
              value: false

          pool:
            type: windows
          steps:
          - checkout: self

          - pwsh: |
              if (-not (Test-Path $(repoRoot)/.config/tsaoptions.json)) {
                Get-ChildItem $(Build.SourcesDirectory) -recurse -ErrorAction SilentlyContinue
                throw "tsaoptions.json does not exist under $(repoRoot)/.config"
              }
            displayName: Test if tsaoptions.json exists

          # - task: DownloadPipelineArtifact@2
          #   displayName: 'Download build files'
          #   inputs:
          #     targetPath: $(signOutPath)
          #     artifact: drop_stagebuild_jobbuild

          # - pwsh: |
          #     Set-Location "$(signOutPath)"
          #     dir -dir -recurse *
          #   displayName: Capture artifacts structure

          # - pwsh: |
          #     $module = 'Microsoft.PowerShell.PSResourceGet'
          #     Write-Verbose "installing $module..." -verbose
          #     $ProgressPreference = 'SilentlyContinue'
          #     Install-Module $module -AllowClobber -Force
          #   displayName: Install PSResourceGet 0.9.0 or above for build.psm1



  ### new 
          - pwsh: |
              Get-ChildItem -Path env:
              Get-ChildItem -Path . -Recurse -Directory
            displayName: Capture environment for build
            condition: succeededOrFailed()
            
          - pwsh: |
              $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
              if (Test-Path -Path $modulePath) {
                Write-Verbose -Verbose "Deleting existing temp module path: $modulePath"
                Remove-Item -Path $modulePath -Recurse -Force -ErrorAction Ignore
              }
              if (! (Test-Path -Path $modulePath)) {
                Write-Verbose -Verbose "Creating new temp module path: $modulePath"
                $null = New-Item -Path $modulePath -ItemType Directory
              }
            displayName: Create temporary module path

          - pwsh: |
              $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
              Write-Verbose -Verbose "Install PSResourceGet to temp module path"
              Save-Module -Name Microsoft.PowerShell.PSResourceGet -MinimumVersion 0.9.0 -Path $modulePath -AllowPrerelease -Force
            displayName: Install Microsoft.PowerShell.PSResourceGet v3

          - pwsh: |
              $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
              $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
              Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
              Import-Module -Name $(Build.SourcesDirectory)/buildtools.psd1 -Force
              #
              # Build for net472 framework
              $(Build.SourcesDirectory)/build.ps1 -Build -Clean -BuildConfiguration Release -BuildFramework 'net472'
            displayName: Build and publish artifact

          # - pwsh: |
          #     $signSrcPath = "$($config.BuildOutputPath)"            
          #     $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${signSrcPath}"
          #     Write-Host "sending " + $vstsCommandString
          #     Write-Host "##$vstsCommandString"
          #     #
          #     $outSignPath = "$($config.BuildOutputPath)"
          #     $vstsCommandString = "vso[task.setvariable variable=signOutPath]${outSignPath}"
          #     Write-Host "sending " + $vstsCommandString
          #     Write-Host "##$vstsCommandString"
          #   displayName: Create fake source and output variables for signing template and no signing
          #   condition: and(succeeded(), eq(variables['SkipSigning'], 'True'))


          - task: CodeQL3000Finalize@0 # Add CodeQL Finalize task right after your 'Build' step.
            condition: always()
            env:
              ob_restore_phase: true # Set ob_restore_phase to run this step before 'ðŸ”’ Setup Signing' step.

          - task: onebranch.pipeline.signing@1
            displayName: Sign 1st party files
            inputs:
              command: 'sign'
              signing_profile: external_distribution
              files_to_sign: '**\*.psd1;**\*.psm1;**\*.ps1xml;**\Microsoft*.dll'
              search_root: $(signSrcPath)

          - task: onebranch.pipeline.signing@1
            displayName: Sign 3rd Party files
            inputs:
              command: 'sign'
              signing_profile: 135020002
              files_to_sign: '**/Dependencies/*.dll'
              search_root: $(signSrcPath)

          - task: CopyFiles@2
            displayName: "Copy signed files to ob_outputDirectory - '$(ob_outputDirectory)'"
            inputs:
              SourceFolder: "$(signSrcPath)"
              Contents: '**'
              TargetFolder: $(ob_outputDirectory)

          # - pwsh: |
          #     $moduleData = Import-PowerShellDataFile "$(repoRoot)/src/Microsoft.PowerShell.PSResourceGet.psd1"  
          #     $moduleVersion = $moduleData.ModuleVersion
          #     $vstsCommandString = "vso[task.setvariable variable=ob_sdl_sbom_packageversion]${moduleVersion}"

          #     Write-Host "sending $vstsCommandString"
          #     Write-Host "##$vstsCommandString"
          #   displayName: Setup SBOM Package Version

        - pwsh: |
            $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
            $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
            Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
            Import-Module -Name $(Build.SourcesDirectory)/buildtools.psd1 -Force

            $config = Get-BuildConfiguration

            # Set signing src path variable
            $vstsCommandString = "vso[task.setvariable variable=signSrcPathCreated]${ob_outputDirectory}"
            Write-Host "sending " + $vstsCommandString
            Write-Host "##$vstsCommandString"

            # Set signing out path variable
            $vstsCommandString = "vso[task.setvariable variable=signOutPathCreated]${signOutPath}"
            Write-Host "sending " + $vstsCommandString
            Write-Host "##$vstsCommandString"
            
            # Upload symbol pdb file
            $moduleName = "$($config.ModuleName)"
            $symbolFilePath = Join-Path -Path $srcPath -ChildPath "$moduleName.pdb"
            $folderName = "symbolResult"
            $artifactName = "symbolfile"
          # $vstsCommandString = "vso[artifact.upload containerfolder=${folderName};artifactname=${artifactName}]${symbolFilePath}"
            Write-Host "sending " + $vstsCommandString
            Write-Host "##$vstsCommandString"
          displayName: Set up for module created files code signing
          condition: and(and(succeeded(), eq(variables['Build.Reason'], 'Manual')), ne(variables['SkipSigning'], 'True'))

        - pwsh: |
            Write-Host "ob_outputDirectory-----------------------"
            Get-ChildItem -Path $(ob_outputDirectory) -Recurse
          displayName: Capture created files to sign source
          condition: succeededOrFailed()

        - pwsh: |
            Get-ChildItem -Path env:
          displayName: Capture environment for created files signing
          condition: succeededOrFailed()

        - pwsh: |
            $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
            $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
            Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
            Import-Module -Name $(Build.SourcesDirectory)/buildtools.psd1 -Force

            $(Build.SourcesDirectory)/build.ps1 -Publish -Signed
          displayName: Publish module nuget package and upload package artifact
          condition: succeeded()



### end new

#        - pwsh: |
#            Set-Location "$(signOutPath)"
#            ./build.ps1 -Publish -Signed
#          displayName: Create nupkg for publishing

#        - task: onebranch.pipeline.signing@1
#          displayName: Sign nupkg
#          inputs:
#            command: 'sign'
#            signing_profile: external_distribution
##            files_to_sign: '**\*.nupkg'
 #           search_root: $(signOutPath)

##        - pwsh: |
#            Write-Host "------Get-Childitem $(signOutPath)--------------"
#            Get-ChildItem $(signOutPath) -Recurse
#            Write-Host "------Get-Childitem $(ob_outputDirectory)--------------"
#            Get-ChildItem $(ob_outputDirectory) -Recurse

#          displayName: Logging info 

    - stage: release
      displayName: Release PSResourceGet
      dependsOn: stagebuild
      variables:
        #version: $[ stageDependencies.build.main.outputs['package.version'] ]
        #drop: $(Pipeline.Workspace)/drop_stagebuild_jobmain
        - name: ob_outputDirectory
          value: '$(Build.ArtifactStagingDirectory)/ONEBRANCH_ARTIFACT'
        - name: repoRootOut
          value: $(Build.SourcesDirectory)\PSResourceGet\out
        - name: ob_sdl_tsa_configFile
          value: $(Build.SourcesDirectory)\PSResourceGet\.config\tsaoptions.json
        # Disable because SBOM was already built in the previous job
        - name: ob_sdl_sbom_enabled
          value: false
        - name: signOutPath
          value: $(repoRootOut)/signed
        - name: ob_signing_setup_enabled
          value: true
        # This job is not compiling code, so disable codeQL
        - name: ob_sdl_codeql_compiled_enabled
          value: false
      jobs:
      - job: validation
        displayName: Manual validation
        pool:
          type: agentless
        timeoutInMinutes: 1440
        steps:
        - task: ManualValidation@0
          displayName: Wait 24 hours for validation
          inputs:
            #notifyUsers: $(Build.RequestedForEmail)
            instructions: Please validate the release
            timeoutInMinutes: 1440
      - job: PSGalleryPublish
        displayName: Publish to PSGallery
        pool:
          type: windows
        variables:
          ob_outputDirectory: $(Build.SourcesDirectory)/out
        steps:
        - download: current
          displayName: Download artifact

        - pwsh: |
            Get-ChildItem $(repoRootOut) -Recurse
            Write-Host "---------------------"
            Get-ChildItem $($(Build.SourcesDirectory)/out) -Recurse
            Write-Host "---------------------"
            Get-ChildItem $(Pipeline.Workspace) -Recurse
          displayName: Capture environment

        - task: NuGetCommand@2
          displayName: Push PowerShellGet module artifacts to PSGallery feed
          inputs:
            command: push
            packagesToPush: '$(signOutPath)/**/Microsoft.PowerShell.PSResourceGet.*.nupkg'
            nuGetFeedType: external
            publishFeedCredentials: PSGet-PSGalleryPush


