parameters:
  validationJob1: approvalToADO
  validationJob2: approvalToPSGallery
  jobName1: pscorerelease_release
  jobName2: psgallery_release
  displayValidationJob1: 'Manual approval to PSCore-Release feed in ADO'
  displayValidationJob2: 'Manual approval to PowerShell Gallery'
  instructionsValidationJob1: 'Approve if ready to release to PSCore-Release'
  instructionsValidationJob2: 'Approve if ready to release to PowerShell Gallery'
  displayNameJob1: 'Release PSResourceGet to PSCore-Release'
  displayNameJob2: 'Release PSResourceGet to PSGallery'

jobs:
- job: ${{ parameters.validationJob1 }}
  displayName: ${{ parameters.displayValidationJob1 }}
  pool: server
  timeoutInMinutes: 4320 # job times out in 3 days
  steps:
  - task: ManualValidation@0
    displayName: ${{ parameters.displayValidationJob1 }}
    timeoutInMinutes: 2880 # 2 days
    inputs:
      instructions: ${{ parameters.instructionsValidationJob1 }}
      onTimeout: reject

- job: ${{ parameters.jobName1 }}
  dependsOn: ${{ parameters.validationJob1 }}
  pool:
    name: 1ES
    demands:
    - ImageOverride -equals PSMMS2019-Secure
  displayName: ${{ parameters.displayNameJob1 }}

  steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download PSResourceGet module artifacts'
    inputs:
      artifact: nupkg
      patterns: '**/*.nupkg'
      downloadPath: '$(Pipeline.Workspace)/nuget'

  - powershell: |
      $package = (Get-ChildItem '$(Pipeline.Workspace)/nuget/Microsoft.PowerShell.PSResourceGet.*.nupkg').FullName
      $package
      $vstsCommandString = "vso[task.setvariable variable=NugetPkgPath]${package}"
      Write-Host "sending " + $vstsCommandString
      Write-Host "##$vstsCommandString"
    displayName: 'Capture PSResourceGet module NuGet package path and set environment variable'

  - task: NuGetAuthenticate@1
    inputs:
      nuGetServiceConnections: PSCoreReleasePush

  - task: NuGetCommand@2
    displayName: 'Push PSResourceGet module artifacts to PowerShell ADO feed'
    inputs:
      command: push
      packagesToPush: '$(NugetPkgPath)'
      nuGetFeedType: external
      publishFeedCredentials: PSCoreReleasePush

- job: ${{ parameters.validationJob2 }}
  dependsOn: ${{ parameters.jobName1 }}
  displayName: ${{ parameters.displayValidationJob2 }}
  pool: server
  timeoutInMinutes: 4320 # job times out in 3 days
  steps:
  - task: ManualValidation@0
    displayName: ${{ parameters.displayValidationJob2 }}
    timeoutInMinutes: 2880 # 2 days
    inputs:
      instructions: ${{ parameters.instructionsValidationJob2 }}
      onTimeout: reject

- job: ${{ parameters.jobName2 }}
  dependsOn: ${{ parameters.validationJob2 }}
  pool:
    name: 1ES
    demands:
    - ImageOverride -equals PSMMS2019-Secure
  displayName: ${{ parameters.displayNameJob2 }}

  steps:
  - task: DownloadPipelineArtifact@2
    displayName: 'Download PSResourceGet module artifacts'
    inputs:
      artifact: nupkg
      patterns: '**/*.nupkg'
      downloadPath: '$(Pipeline.Workspace)/nuget'

  - powershell: |
      $package = (Get-ChildItem '$(Pipeline.Workspace)/nuget/Microsoft.PowerShell.PSResourceGet.*.nupkg').FullName
      $package
      $vstsCommandString = "vso[task.setvariable variable=NugetPkgPath]${package}"
      Write-Host "sending " + $vstsCommandString
      Write-Host "##$vstsCommandString"
    displayName: 'Capture PSResourceGet module NuGet package path and set environment variable'

  - task: NuGetCommand@2
    displayName: 'Push PSResourceGet module artifacts to PSGallery feed'
    inputs:
      command: push
      packagesToPush: '$(NugetPkgPath)'
      nuGetFeedType: external
      publishFeedCredentials: PSGalleryPush
