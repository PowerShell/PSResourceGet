name: $(BuildDefinitionName)-$(date:yyMM).$(date:dd)$(rev:rrr)
trigger: none
pr: none

schedules:
# Use https://crontab.guru/#0_8_*_*_* to compute crontab expression
# Temporary schedule to run every 30 minutes, to investigate test failures
# - cron: "*/30 * * * *"
# Run signed build, with limited signing cert, every day at 9 am
- cron: 0 9 * * *
  branches:
    include:
    - refs/heads/master
  always: true

variables:
  - group: ESRP
  # Prevents auto-injection of nuget-security-analysis (not needed for open source projects)
  - name: skipNugetSecurityAnalysis
    value: true

resources:
  repositories:
  - repository: ComplianceRepo
    type: github
    endpoint: ComplianceGHRepo
    name: PowerShell/compliance

stages:
- stage: Build
  displayName: Build PSResourceGet Module Package
  jobs:
  - job: BuildPkg
    displayName: Build Package
    pool:
      name: 1ES
      demands:
      - ImageOverride -equals PSMMS2019-Secure

    steps:

    - pwsh: |
        Get-ChildItem -Path env:
      displayName: Capture environment for build
      condition: succeededOrFailed()

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        if (Test-Path -Path $modulePath) {
          Write-Verbose -Verbose "Deleting existing temp module path: $modulePath"
          Remove-Item -Path $modulePath -Recurse -Force -ErrorAction Ignore
        }
        if (! (Test-Path -Path $modulePath)) {
          Write-Verbose -Verbose "Creating new temp module path: $modulePath"
          $null = New-Item -Path $modulePath -ItemType Directory
        }
      displayName: Create temporary module path

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        Write-Verbose -Verbose "Install PSResourceGet to temp module path"
        Save-Module -Name PowerShellGet -MinimumVersion 3.0.18-beta18 -Path $modulePath -AllowPrerelease -Force
      displayName: Install PowerShellGet v3

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
        Import-Module -Name $(Build.SourcesDirectory)/buildtools.psd1 -Force
        #
        # Build for net472 framework
        $(Build.SourcesDirectory)/build.ps1 -Build -Clean -BuildConfiguration Release -BuildFramework 'net472'
      displayName: Build module

    - pwsh: |
        $signSrcPath = "$($config.BuildOutputPath)"
        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${signSrcPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
        #
        $outSignPath = "$($config.BuildOutputPath)"
        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${outSignPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Create fake source and output variables for signing template and no signing
      condition: succeeded()

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
        Import-Module -Name $(Build.SourcesDirectory)/buildtools.psd1 -Force
        $config = Get-BuildConfiguration

        $signOutPath = "$($config.SignedOutputPath)\$($config.ModuleName)"
        if (! (Test-Path -Path $signOutPath)) {
          $null = New-Item -Path $signOutPath -ItemType Directory
        }

        # Third party files signing directory
        $srcPath = "$($config.BuildOutputPath)\$($config.ModuleName)"
        $thirdPartySignSrcPath = "$($config.BuildOutputPath)\ThirdParty"
        if (! (Test-Path -Path $thirdPartySignSrcPath)) {
          $null = New-Item -Path $thirdPartySignSrcPath -ItemType Directory -Verbose
        }

        # Net472 directory
        $net472Path = Join-Path -Path $thirdPartySignSrcPath -ChildPath "net472"
        if (! (Test-Path -Path $net472Path)) {
          $null = New-Item -Path $net472Path -ItemType Directory -Verbose
        }
        Get-ChildItem -Path (Join-Path -Path $srcPath -ChildPath "net472") -Filter '*.dll' | Foreach-Object {
          if ($_.Name -ne 'PSResourceGet.dll') {
            $sig = Get-AuthenticodeSignature -FilePath $_.FullName
            if ($sig.Status -ne 'Valid' -or $sig.SignerCertificate.Subject -notlike '*Microsoft*' -or $sig.SignerCertificate.Issuer -notlike '*Microsoft Code Signing PCA*') {
              # Copy for third party signing
              Copy-Item -Path $_.FullName -Dest $net472Path -Force -Verbose
            }
          }
        }

        # Set signing src path variable
        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${thirdPartySignSrcPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        # Set signing out path variable
        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${signOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Set up for module third party files code signing
      condition: succeeded()

    - template: EsrpSign.yml@ComplianceRepo
      parameters:
        buildOutputPath: $(signSrcPath)
        signOutputPath: $(signOutPath)
        certificateId: "CP-231522"
        shouldSign: $(ShouldSign)
        pattern: |
          **\*.dll
        useMinimatch: true

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
        Import-Module -Name $(Build.SourcesDirectory)/buildtools.psd1 -Force
        #
        $config = Get-BuildConfiguration

        $srcPath = "$($config.BuildOutputPath)\$($config.ModuleName)"
        $signOutPath = "$($config.SignedOutputPath)\$($config.ModuleName)"
        if (! (Test-Path -Path $signOutPath)) {
          $null = New-Item -Path $signOutPath -ItemType Directory
        }

        # Copy Notice.txt
        Copy-Item -Path (Join-Path -Path $srcPath -ChildPath "Notice.txt") -Dest $signOutPath
        # Copy LICENSE
        Copy-Item -Path (Join-Path -Path $srcPath -ChildPath "LICENSE") -Dest $signOutPath

        # Net472 directory
        $net472SignedOutPath = Join-Path -Path $signOutPath -ChildPath "net472"
        if (! (Test-Path -Path $net472SignedOutPath)) {
          $null = New-Item -Path $net472SignedOutPath -ItemType Directory -Verbose
        }
        Get-ChildItem -Path (Join-Path -Path $srcPath -ChildPath "net472") -Filter '*.dll' | Foreach-Object {
          if ($_.Name -ne 'PSResourceGet.dll') {
            $sig = Get-AuthenticodeSignature -FilePath $_.FullName
            if ($sig.Status -eq 'Valid' -and ($sig.SignerCertificate.Subject -like '*Microsoft*' -and $sig.SignerCertificate.Issuer -like '*Microsoft Code Signing PCA*')) {
              # Copy already signed files directly to output
              Copy-Item -Path $_.FullName -Dest $net472SignedOutPath -Force -Verbose
            }
          }
        }
      displayName: Copy already properly signed third party files
      condition: succeeded()

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
        Import-Module -Name $(Build.SourcesDirectory)/buildtools.psd1 -Force
        $config = Get-BuildConfiguration

        # Created files signing directory
        $srcPath = "$($config.BuildOutputPath)\$($config.ModuleName)"
        $createdSignSrcPath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'CreatedFiles'
        if (! (Test-Path -Path $createdSignSrcPath)) {
          $null = New-Item -Path $createdSignSrcPath -ItemType Directory -Verbose
        }
        Copy-Item -Path (Join-Path -Path $srcPath -ChildPath "PSResourceGet.psd1") -Dest $createdSignSrcPath -Force -Verbose
        Copy-Item -Path (Join-Path -Path $srcPath -ChildPath "PSGet.Format.ps1xml") -Dest $createdSignSrcPath -Force -Verbose

        $net472Path = Join-Path -Path $createdSignSrcPath -ChildPath "net472"
        if (! (Test-Path -Path $net472Path)) {
          $null = New-Item -Path $net472Path -ItemType Directory -Verbose
        }
        Copy-Item -Path (Join-Path -Path $srcPath -ChildPath "net472\PSResourceGet.dll") -Dest $net472Path -Force -Verbose

        # Set signing src path variable
        $vstsCommandString = "vso[task.setvariable variable=signSrcPath]${createdSignSrcPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"

        $signOutPath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'CreatedFilesOut'
        if (! (Test-Path -Path $signOutPath)) {
          $null = New-Item -Path $signOutPath -ItemType Directory -Verbose
        }

        # Set signing out path variable
        $vstsCommandString = "vso[task.setvariable variable=signOutPath]${signOutPath}"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
      displayName: Set up for module created files code signing
      condition: succeeded()

    - pwsh: |
        Get-ChildItem -Path env:
        Get-ChildItem -Path . -Recurse -Directory
      displayName: Capture environment for code signing
      condition: succeededOrFailed()

    - template: EsrpSign.yml@ComplianceRepo
      parameters:
        buildOutputPath: $(signSrcPath)
        signOutputPath: $(signOutPath)
        certificateId: "CP-460906"
        shouldSign: $(ShouldSign)
        pattern: |
          **\*.dll
          **\*.psd1
          **\*.psm1
          **\*.ps1xml
        useMinimatch: true

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
        Import-Module -Name $(Build.SourcesDirectory)/buildtools.psd1 -Force
        $config = Get-BuildConfiguration

        $signSrcPath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'CreatedFilesOut'
        $signOutPath = "$($config.SignedOutputPath)\$($config.ModuleName)"
        Copy-Item -Path "$signSrcPath/*" -Dest $signOutPath -Recurse -Force -Verbose
      displayName: Copy signed created files to output
      condition: and(succeeded(), eq(variables['ShouldSign'], 'True'))

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
        Import-Module -Name $(Build.SourcesDirectory)/buildtools.psd1 -Force
        #
        if ($env:ShouldSign -ne 'True')
        {
          $(Build.SourcesDirectory)/build.ps1 -Publish
        }
        else
        {
          $(Build.SourcesDirectory)/build.ps1 -Publish -Signed
        }
      displayName: Publish module nuget package and upload package artifact
      condition: succeeded()

    - pwsh: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
        Import-Module -Name $(Build.SourcesDirectory)/buildtools.psd1 -Force
        #
        $config = Get-BuildConfiguration
        $artifactName = "$($config.ModuleName)"
        $srcModulePath = Resolve-Path -Path "$($config.SignedOutputPath)/$($config.ModuleName)"
        Get-ChildItem $srcModulePath
        Write-Host "##vso[artifact.upload containerfolder=$artifactName;artifactname=$artifactName;]$srcModulePath"
      displayName: Upload module artifact

- stage: Compliance
  displayName: Compliance
  dependsOn: Build
  jobs:
  - job: ComplianceJob
    pool:
      name: 1ES
      demands:
      - ImageOverride -equals PSMMS2019-Secure

    steps:
    - checkout: self
      clean: true
    - checkout: ComplianceRepo
      clean: true
    - download: current
      artifact: 'PSResourceGet'
    - template: assembly-module-compliance.yml@ComplianceRepo
      parameters:
        # binskim
        AnalyzeTarget: '$(Pipeline.Workspace)/PSResourceGet/net472/PSResourceGet.dll'
        AnalyzeSymPath: 'SRV*'
        # component-governance
        sourceScanPath: '$(Build.SourcesDirectory)'
        # credscan
        suppressionsFile: ''
        # TermCheck
        optionsRulesDBPath: ''
        optionsFTPath: ''
        # tsa-upload
        codeBaseName: 'PowerShellGet_210306'
        # selections
        APIScan: false # set to false when not using Windows APIs

- stage: Test
  displayName: Test Package
  dependsOn: Build
  jobs:
  - template: test.yml
    parameters:
      jobName: TestPkgWin
      displayName: PowerShell Core on Windows
      imageName: windows-latest

  - template: test.yml
    parameters:
      jobName: TestPkgWinPS
      displayName: Windows PowerShell on Windows
      imageName: windows-latest
      powershellExecutable: powershell

  - template: test.yml
    parameters:
      jobName: TestPkgUbuntu
      displayName: PowerShell Core on Ubuntu
      imageName: ubuntu-latest

  - template: test.yml
    parameters:
      jobName: TestPkgWinMacOS
      displayName: PowerShell Core on macOS
      imageName: macOS-latest
