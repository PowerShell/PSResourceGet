parameters:
  jobName: TestPkgWin
  imageName: windows-latest
  displayName: PowerShell Core on Windows
  powershellExecutable: pwsh

jobs:
- job: ${{ parameters.jobName }}
  pool:
    vmImage: ${{ parameters.imageName }}
  displayName: ${{ parameters.displayName }}
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download artifacts'
    inputs:
      buildType: current
      downloadType: specific
      itemPattern: '**/*.nupkg'
      downloadPath: '$(System.ArtifactsDirectory)'

  - ${{ parameters.powershellExecutable }}: |
      Get-ChildItem -Path "$(System.ArtifactsDirectory)"
    displayName: Capture artifacts directory

  - ${{ parameters.powershellExecutable }}: |
      $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
      if (Test-Path -Path $modulePath) {
        Write-Verbose -Verbose "Deleting existing temp module path: $modulePath"
        Remove-Item -Path $modulePath -Recurse -Force -ErrorAction Ignore
      }
      if (! (Test-Path -Path $modulePath)) {
        Write-Verbose -Verbose "Creating new temp module path: $modulePath"
        $null = New-Item -Path $modulePath -ItemType Directory
      }
    displayName: Create temporary module path

  - ${{ parameters.powershellExecutable }}: |
      Write-Verbose -Verbose "Install PowerShellGet V3"
      Install-Module -Name PowerShellGet -RequiredVersion 3.0.16-beta16 -AllowPrerelease -Force
      Write-Verbose -Verbose "Install PlatyPS"
      Install-Module -Name "platyPS" -Force
      Write-Verbose -Verbose "Install PSScriptAnalyzer"
      Install-Module -Name "PSScriptAnalyzer" -Force
      Write-Verbose -Verbose "Install Pester 5.X"
      Install-Module -Name "Pester" -MinimumVersion 5.0 -Force
    displayName: Install PowerShellGet and dependencies

  - ${{ parameters.powershellExecutable }}: |
      Write-Verbose -Verbose "Importing helpBuild from: $($Build.SourcesDirectory)"
      . $(Build.SourcesDirectory)/helpBuild.ps1
      $sourceName = 'pspackageproject-local-repo'
      Register-PackageSource -Name $sourceName -Location "$(System.ArtifactsDirectory)" -ProviderName PowerShellGet -Force -ErrorAction Ignore
      Get-PackageSource -Name $sourceName
      $config = Get-ProjectConfiguration
      $buildOutputPath = $config.BuildOutputPath
      Write-Verbose -Verbose -Message "PSPackage build output path: $buildOutputPath"
      $null = New-Item -ItemType Directory -Path $buildOutputPath -Verbose
      $moduleName = $config.ModuleName
      Write-Verbose -Verbose "Saving package $sourceName to $($config.BuildOutputPath)"
      Save-Package -Name $moduleName -Source $sourceName -ProviderName PowerShellGet -Path $config.BuildOutputPath -AllowPrereleaseVersions -Force
    displayName: Extract product artifact

  - ${{ parameters.powershellExecutable }}: |
      Write-Verbose -Verbose "Importing helpBuild from: $($Build.SourcesDirectory)"
      . $(Build.SourcesDirectory)/helpBuild.ps1
      #
      Invoke-ProjectTest -Type Functional
    displayName: Execute functional tests
    errorActionPreference: continue

  - ${{ parameters.powershellExecutable }}: |
      Write-Verbose -Verbose "Importing helpBuild from: $($Build.SourcesDirectory)"
      . $(Build.SourcesDirectory)/helpBuild.ps1
      #
      Invoke-ProjectTest -Type StaticAnalysis
    displayName: Execute static analysis tests
    errorActionPreference: continue
    condition: succeededOrFailed()

  - ${{ parameters.powershellExecutable }}: |
      Unregister-PSRepository -Name 'pspackageproject-local-repo' -ErrorAction Ignore
    displayName: Unregister temporary PSRepository
    condition: always()
    