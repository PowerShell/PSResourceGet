parameters:
  jobName: TestPkgWin
  imageName: windows-latest
  displayName: PowerShell Core on Windows
  powershellExecutable: pwsh
  buildDirectory: '.'

jobs:
- job: ${{ parameters.jobName }}
  pool:
    vmImage: ${{ parameters.imageName }}
  displayName: ${{ parameters.displayName }}
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download artifacts'
    inputs:
      buildType: current
      downloadType: specific
      itemPattern: '**/*.nupkg'
      downloadPath: '$(System.ArtifactsDirectory)'

  - ${{ parameters.powershellExecutable }}: |
      Get-ChildItem -Path "$(System.ArtifactsDirectory)"
    displayName: Capture artifacts directory

  - ${{ parameters.powershellExecutable }}: |
      $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
      if (Test-Path -Path $modulePath) {
        Write-Verbose -Verbose "Deleting existing temp module path: $modulePath"
        Remove-Item -Path $modulePath -Recurse -Force -ErrorAction Ignore
      }
      if (! (Test-Path -Path $modulePath)) {
        Write-Verbose -Verbose "Creating new temp module path: $modulePath"
        $null = New-Item -Path $modulePath -ItemType Directory
      }
    displayName: Create temporary module path

  - ${{ parameters.powershellExecutable }}: |
      $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
      Write-Verbose -Verbose "Install PSResourceGet to temp module path"
      Save-Module -Name PowerShellGet -MinimumVersion 3.0.18-beta18 -Path $modulePath -AllowPrerelease -Force
      Write-Verbose -Verbose "Install Pester 4.X to temp module path"
      Save-Module -Name "Pester" -MaximumVersion 4.99 -Path $modulePath -Force
    displayName: Install PowerShellGetV3 and Pester

  - ${{ parameters.powershellExecutable }}: |
      $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
      $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
      Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
      Import-Module -Name (Join-Path -Path '${{ parameters.buildDirectory }}' -ChildPath 'buildtools.psd1') -Force
      #
      Install-ModulePackageForTest -PackagePath "$(System.ArtifactsDirectory)"
    displayName: Install module for test from downloaded artifact
    workingDirectory: ${{ parameters.buildDirectory }}

  - ${{ parameters.powershellExecutable }}: |
      $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
      $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
      Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
      Import-Module -Name (Join-Path -Path '${{ parameters.buildDirectory }}' -ChildPath 'buildtools.psd1') -Force
      #
      Invoke-ModuleTests -Type Functional
    env:
      MAPPED_GITHUB_PAT: $(github_pat)
      MAPPED_ADO_PUBLIC_PAT: $(ado_public_pat)
      MAPPED_ADO_PRIVATE_PAT: $(ado_private_pat)
      MAPPED_ADO_PRIVATE_REPO_URL: $(ado_private_repo_url)
    displayName: Execute functional tests
    workingDirectory: ${{ parameters.buildDirectory }}
    errorActionPreference: continue
    condition: succeededOrFailed()

