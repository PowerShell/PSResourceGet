parameters:
  jobName: TestPkgWin
  imageName: windows-latest
  displayName: PowerShell Core on Windows
  powershellExecutable: pwsh
  buildDirectory: '.'
  useAzAuth: false

jobs:
- job: ${{ parameters.jobName }}
  pool:
    vmImage: ${{ parameters.imageName }}
  displayName: ${{ parameters.displayName }}
  steps:
  - ${{ parameters.powershellExecutable }}: |
        Install-Module -Name 'Microsoft.PowerShell.SecretManagement' -force -SkipPublisherCheck -AllowClobber
        Install-Module -Name 'Microsoft.PowerShell.SecretStore' -force -SkipPublisherCheck -AllowClobber
        $vaultPassword = ConvertTo-SecureString $("a!!"+ (Get-Random -Maximum ([int]::MaxValue))) -AsPlainText -Force
        Set-SecretStoreConfiguration -Authentication None -Interaction None -Confirm:$false -Password $vaultPassword
        Register-SecretVault -Name SecretStore -ModuleName Microsoft.PowerShell.SecretStore -DefaultVault
    displayName: Install Secret store
    condition: eq(${{ parameters.useAzAuth }}, false)

  - task: DownloadBuildArtifacts@0
    displayName: 'Download artifacts'
    inputs:
      buildType: current
      downloadType: specific
      itemPattern: '**/*.nupkg'
      downloadPath: '$(System.ArtifactsDirectory)'

  - ${{ parameters.powershellExecutable }}: |
      Get-ChildItem -Path "$(System.ArtifactsDirectory)"
    displayName: Capture artifacts directory

  - ${{ parameters.powershellExecutable }}: |
      $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
      if (Test-Path -Path $modulePath) {
        Write-Verbose -Verbose "Deleting existing temp module path: $modulePath"
        Remove-Item -Path $modulePath -Recurse -Force -ErrorAction Ignore
      }
      if (! (Test-Path -Path $modulePath)) {
        Write-Verbose -Verbose "Creating new temp module path: $modulePath"
        $null = New-Item -Path $modulePath -ItemType Directory
      }
    displayName: Create temporary module path

  - ${{ parameters.powershellExecutable }}: |
      $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
      Write-Verbose -Verbose "Install Microsoft.PowerShell.PSResourceGet to temp module path"
      Save-Module -Name Microsoft.PowerShell.PSResourceGet -MinimumVersion 0.9.0-rc1 -Path $modulePath -AllowPrerelease -Force
      Write-Verbose -Verbose "Install Pester 4.X to temp module path"
      Save-Module -Name "Pester" -MaximumVersion 4.99 -Path $modulePath -Force
    displayName: Install Microsoft.PowerShell.PSResourceGet and Pester

  - ${{ parameters.powershellExecutable }}: |
      $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
      $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
      Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
      Import-Module -Name (Join-Path -Path '${{ parameters.buildDirectory }}' -ChildPath 'buildtools.psd1') -Force
      #
      Install-ModulePackageForTest -PackagePath "$(System.ArtifactsDirectory)"
    displayName: Install module for test from downloaded artifact
    workingDirectory: ${{ parameters.buildDirectory }}

  - task: AzurePowerShell@5
    inputs:
      azureSubscription: PSResourceGetACR
      azurePowerShellVersion: LatestVersion
      ScriptType: InlineScript
      pwsh: true
      inline: |
        Write-Verbose -Verbose "Getting Azure Container Registry"
        Get-AzContainerRegistry -ResourceGroupName 'PSResourceGet' -Name 'psresourcegettest' | Select-Object -Property *
        Write-Verbose -Verbose "Setting up secret for Azure Container Registry"
        $azt = Get-AzAccessToken
        $tenantId = $azt.TenantID
        Set-Secret -Name $tenantId -Secret $azt.Token -Verbose
        $vstsCommandString = "vso[task.setvariable variable=TenantId]$tenantId"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
    displayName: 'Setup Azure Container Registry secret'
    condition: eq(${{ parameters.useAzAuth }}, false)

  - powershell: |
      # Set environment variable to identify in tests that secret store should not be used.
        $vstsCommandString = "vso[task.setvariable variable=UsingAzAuth]true"
        Write-Host "sending " + $vstsCommandString
        Write-Host "##$vstsCommandString"
    displayName: 'Set UsingAzAuth environment variable'
    condition: eq(${{ parameters.useAzAuth }}, true)

  - task: AzurePowerShell@5
    inputs:
      azureSubscription: PSResourceGetACR
      azurePowerShellVersion: LatestVersion
      ScriptType: InlineScript
      inline: |
        $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
        $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
        Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
        Import-Module -Name (Join-Path -Path '${{ parameters.buildDirectory }}' -ChildPath 'buildtools.psd1') -Force
        Invoke-ModuleTestsACR -Type Functional
    env:
      MAPPED_GITHUB_PAT: $(github_pat)
      MAPPED_ADO_PUBLIC_PAT: $(ado_public_pat)
      MAPPED_ADO_PRIVATE_PAT: $(ado_private_pat)
      MAPPED_ADO_PRIVATE_REPO_URL: $(ado_private_repo_url)
    displayName: 'Execute functional tests with AzAuth'
    condition: eq(${{ parameters.useAzAuth }}, true)

  - ${{ parameters.powershellExecutable }}: |
      $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
      $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
      Write-Verbose -Verbose "Importing build utilities (buildtools.psd1)"
      Import-Module -Name (Join-Path -Path '${{ parameters.buildDirectory }}' -ChildPath 'buildtools.psd1') -Force
      Invoke-ModuleTests -Type Functional
    env:
      MAPPED_GITHUB_PAT: $(github_pat)
      MAPPED_ADO_PUBLIC_PAT: $(ado_public_pat)
      MAPPED_ADO_PRIVATE_PAT: $(ado_private_pat)
      MAPPED_ADO_PRIVATE_REPO_URL: $(ado_private_repo_url)
    displayName: Execute functional tests
    workingDirectory: ${{ parameters.buildDirectory }}
    errorActionPreference: continue
    condition: eq(${{ parameters.useAzAuth }}, false)
