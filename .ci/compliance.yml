steps:

- powershell: |
    $powerShellPath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'powershell'
    Invoke-WebRequest -Uri https://raw.githubusercontent.com/PowerShell/PowerShell/master/tools/install-powershell.ps1 -outfile ./install-powershell.ps1
    ./install-powershell.ps1 -Destination $powerShellPath
    $vstsCommandString = "vso[task.setvariable variable=PATH]$powerShellPath;$env:PATH"
    Write-Host "sending " + $vstsCommandString
    Write-Host "##$vstsCommandString"
  displayName: Install PowerShell Core

- task: DownloadBuildArtifacts@0
  displayName: 'Download artifacts'
  inputs:
    buildType: current
    downloadType: specific
    itemPattern: '**/*.nupkg'
    downloadPath: '$(System.ArtifactsDirectory)'

- pwsh: |
    Get-ChildItem -Path "$(System.ArtifactsDirectory)" -Recurse
  displayName: Capture artifacts directory

- pwsh: |
    $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
    if (Test-Path -Path $modulePath) {
      Write-Verbose -Verbose "Deleting existing temp module path: $modulePath"
      Remove-Item -Path $modulePath -Recurse -Force -ErrorAction Ignore
    }
    if (! (Test-Path -Path $modulePath)) {
      Write-Verbose -Verbose "Creating new temp module path: $modulePath"
      $null = New-Item -Path $modulePath -ItemType Directory
    }
  displayName: Create temporary module path

- pwsh: |
    $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
    Write-Verbose -Verbose "Install PowerShellGet V3 to temp module path"
    Save-Module -Name PowerShellGet -Path $modulePath -MinimumVersion 3.0.0-beta10 -AllowPrerelease -Force
    Write-Verbose -Verbose "Install PlatyPS to temp module path"
    Save-Module -Name "platyPS" -Path $modulePath -Force
    Write-Verbose -Verbose "Install PSScriptAnalyzer to temp module path"
    Save-Module -Name "PSScriptAnalyzer" -Path $modulePath -RequiredVersion 1.18.0 -Force
    Write-Verbose -Verbose "Install Pester 4.X to temp module path"
    Save-Module -Name "Pester" -MaximumVersion 4.99 -Path $modulePath -Force
    Write-Verbose -Verbose "Install PSPackageProject to temp module path"
    Save-Module -Name PSPackageProject -Path $modulePath -Force
  displayName: Install PSPackageProject and dependencies

- pwsh: |
    $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
    $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
    $sourceName = 'pspackageproject-local-repo'
    Register-PackageSource -Name $sourceName -Location "$(System.ArtifactsDirectory)" -ProviderName PowerShellGet -Force -ErrorAction Ignore
    Get-PackageSource -Name $sourceName
    $config = Get-PSPackageProjectConfiguration
    $buildOutputPath = $config.BuildOutputPath
    $null = New-Item -ItemType Directory -Path $buildOutputPath -Verbose
    $moduleName = $config.ModuleName
    Write-Verbose -Verbose "Saving package $sourceName to $($config.BuildOutputPath)"
    Save-Package -Name $moduleName -Source $sourceName -ProviderName PowerShellGet -Path $config.BuildOutputPath -AllowPrereleaseVersions -Force
    Write-Verbose -Verbose "Writing BUILD_SOURCE variable"
    $vstsCommandString = "vso[task.setvariable variable=BUILD_SOURCE]$($config.BuildOutputPath)"
    Write-Host "sending " + $vstsCommandString
    Write-Host "##$vstsCommandString"
  displayName: Extract product artifact

- pwsh: |
    $modulePath = Join-Path -Path $env:AGENT_TEMPDIRECTORY -ChildPath 'TempModules'
    $env:PSModulePath = $modulePath + [System.IO.Path]::PathSeparator + $env:PSModulePath
    $config = Get-PSPackageProjectConfiguration
    dir "$($config.BuildOutputPath)/*" -r 2>$null
  displayName: 'BuildOutputPath directory'

- task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
  displayName: 'Component Detection'
  inputs:
    sourceScanPath: '$(Build.SourcesDirectory)'
    snapshotForceEnabled: true

- task: securedevelopmentteam.vss-secure-development-tools.build-task-credscan.CredScan@2
  displayName: 'Run CredScan'
  inputs:
    toolMajorVersion: V2
    debugMode: false
  continueOnError: true

- task: securedevelopmentteam.vss-secure-development-tools.build-task-publishsecurityanalysislogs.PublishSecurityAnalysisLogs@2
  displayName: 'Publish Security Analysis Logs to Build Artifacts'
  continueOnError: true

- task: securedevelopmentteam.vss-secure-development-tools.build-task-report.SdtReport@1
  displayName: 'Create Security Analysis Report'
  inputs:
    TsvFile: false
    APIScan: false
    BinSkim: false
    CredScan: true
    PoliCheck: true
    PoliCheckBreakOn: Severity2Above

- pwsh: |
    Unregister-PSRepository -Name 'pspackageproject-local-repo' -ErrorAction Ignore
  displayName: Unregister temporary PSRepository
  condition: always()
